(defvar *Equalities* nil)
(defvar *Composable-Arrows* nil)

(defun new-category () (progn (setq *Equalities* nil)
			      (setq *Composable-Arrows* nil)))

(defun is-arrow (f) (member '(f) *Composable-Arrows* :test #'equal))

(defun add-arrow (f)
  (cond ((is-arrow f) ())
	(t (progn (setq *Equalities* (push (list f) *Equalities*))
		  (setq *Composable-Arrows* (push (list f) *Composable-Arrows*))))))

(defun add-arrows (arrow-list) (dolist (arrow arrow-list) (add-arrow arrow)))

(defun equivalence-class (f) (find f *Equalities*  :test #'member))

(defun are-equal (f g) (member f (equivalence-class g) :test #'equal))

(defun set-equal (f g)
  (let ((x (concatenate 'list (equivalence-class f) (equivalence-class g))))
    (progn (setq *Equalities* (remove (equivalence-class f) *Equalities*))
	   (setq *Equalities* (remove (equivalence-class g) *Equalities*))
	   (setq *Equalities* (push x *Equalities*)))))

(defun suppose (f g)
  (progn (add-arrow f)
	 (add-arrow g)
	 (set-equal f g)))

(defun check (&f &g) (cond ((not (member '(&f) *Composable-Arrows* :test #'equal)) (format nil "~A not arrow" &f))
			   ((not (member '(&g) *Composable-Arrows* :test #'equal)) (format nil "~A not arrow" &g))
			   (are-equal &f &g)))

(new-category)
(add-arrow 0)
(add-arrow 1)
(add-arrow 2)
(suppose 0 1)
(list *Equalities* *Composable-Arrows*)
(suppose '(0 1) '(0 2))
(check '(0 1) '(0 2))
